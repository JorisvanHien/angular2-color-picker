{"version":3,"sources":["color-picker.service.ts"],"names":["core_1","require","classes_1","ColorPickerService","prototype","hsla2hsva","hsla","h","Math","min","s","l","a","Hsva","v","abs","hsva2hsla","hsva","Hsla","rgbaToHsva","rgba","r","g","b","max","d","hsvaToRgba","i","floor","f","p","q","t","Rgba","stringToHsva","colorString","stringParsers","re","parse","execResult","parseInt","isNaN","parseFloat","toLowerCase","key","hasOwnProperty","parser","match","exec","color","this","outputFormat","hslaText","round","denormalizeRGBA","hexText","toString","substr","__decorate","Injectable","exports"],"mappings":"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","file":"color-picker.service.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Rgba, Hsla, Hsva} from './classes';\n\n@Injectable()\nexport class ColorPickerService {\n    constructor() { }\n\n    hsla2hsva(hsla: Hsla): Hsva {\n        let h = Math.min(hsla.h, 1), s = Math.min(hsla.s, 1), l = Math.min(hsla.l, 1), a = Math.min(hsla.a, 1);\n        if (l === 0) {\n            return new Hsva(h, 0, 0, a);\n        } else {\n            let v = l + s * (1 - Math.abs(2 * l - 1)) / 2;\n            return new Hsva(h, 2 * (v - l) / v, v, a);\n        }\n    }\n\n    hsva2hsla(hsva: Hsva): Hsla {\n        let h = hsva.h, s = hsva.s, v = hsva.v, a = hsva.a;\n        if (v === 0) {\n            return new Hsla(h, 0, 0, a)\n        } else if (s === 0 && v === 1) {\n            return new Hsla(h, 1, 1, a)\n        } else {\n            let l = v * (2 - s) / 2;\n            return new Hsla(h, v * s / (1 - Math.abs(2 * l - 1)), l, a)\n        }\n    }\n\n    rgbaToHsva(rgba: Rgba): Hsva {\n        let r = Math.min(rgba.r, 1), g = Math.min(rgba.g, 1), b = Math.min(rgba.b, 1), a = Math.min(rgba.a, 1);\n        let max = Math.max(r, g, b), min = Math.min(r, g, b);\n        let h: number, s: number, v: number = max;\n\n        let d = max - min;\n        s = max === 0 ? 0 : d / max;\n\n        if (max === min) {\n            h = 0;\n        } else {\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n\n        return new Hsva(h, s, v, a)\n    }\n\n    hsvaToRgba(hsva: Hsva): Rgba {\n        let h = hsva.h, s = hsva.s, v = hsva.v, a = hsva.a;\n        let r: number, g: number, b: number;\n\n        let i = Math.floor(h * 6);\n        let f = h * 6 - i;\n        let p = v * (1 - s);\n        let q = v * (1 - f * s);\n        let t = v * (1 - (1 - f) * s);\n\n        switch (i % 6) {\n            case 0:\n                r = v, g = t, b = p;\n                break;\n            case 1:\n                r = q, g = v, b = p;\n                break;\n            case 2:\n                r = p, g = v, b = t;\n                break;\n            case 3:\n                r = p, g = q, b = v;\n                break;\n            case 4:\n                r = t, g = p, b = v;\n                break;\n            case 5:\n                r = v, g = p, b = q;\n                break;\n        }\n\n        return new Rgba(r, g, b, a)\n    }\n\n    stringToHsva(colorString: string = ''): Hsva {\n        let stringParsers = [\n            {\n                re: /(rgb)a?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*%?,\\s*(\\d{1,3})\\s*%?(?:,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)/,\n                parse: function(execResult: any) {\n                    return new Rgba(parseInt(execResult[2]) / 255,\n                        parseInt(execResult[3]) / 255,\n                        parseInt(execResult[4]) / 255,\n                        isNaN(parseFloat(execResult[5])) ? 1 : parseFloat(execResult[5]));\n                }\n            },\n            {\n                re: /(hsl)a?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*(?:,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)/,\n                parse: function(execResult: any) {\n                    return new Hsla(parseInt(execResult[2]) / 360,\n                        parseInt(execResult[3]) / 100,\n                        parseInt(execResult[4]) / 100,\n                        isNaN(parseFloat(execResult[5])) ? 1 : parseFloat(execResult[5]));\n                }\n            },\n            {\n                re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/,\n                parse: function(execResult: any) {\n                    return new Rgba(parseInt(execResult[1], 16) / 255,\n                        parseInt(execResult[2], 16) / 255,\n                        parseInt(execResult[3], 16) / 255,\n                        1);\n                }\n            },\n            {\n                re: /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/,\n                parse: function(execResult: any) {\n                    return new Rgba(parseInt(execResult[1] + execResult[1], 16) / 255,\n                        parseInt(execResult[2] + execResult[2], 16) / 255,\n                        parseInt(execResult[3] + execResult[3], 16) / 255,\n                        1);\n                }\n            }\n        ];\n        colorString = colorString.toLowerCase();\n        let hsva: Hsva = null;\n        for (let key in stringParsers) {\n            if (stringParsers.hasOwnProperty(key)) {\n                let parser = stringParsers[key];\n                let match = parser.re.exec(colorString), color: any = match && parser.parse(match);\n                if (color) {\n                    if (color instanceof Rgba) {\n                        hsva = this.rgbaToHsva(color);\n                    } else if (color instanceof Hsla) {\n                        hsva = this.hsla2hsva(color);\n                    }\n                    return hsva;\n                }\n            }\n        }\n        return hsva;\n    }\n\n    outputFormat(hsva: Hsva, outputFormat: string): string {\n        if (hsva.a < 1) {\n            switch (outputFormat) {\n                case 'hsla':\n                    let hsla = this.hsva2hsla(hsva);\n                    let hslaText = new Hsla(Math.round((hsla.h) * 360), Math.round(hsla.s * 100), Math.round(hsla.l * 100), Math.round(hsla.a * 100) / 100);\n                    return 'hsla(' + hslaText.h + ',' + hslaText.s + '%,' + hslaText.l + '%,' + hslaText.a + ')';\n                default:\n                    let rgba = this.denormalizeRGBA(this.hsvaToRgba(hsva));\n                    return 'rgba(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ',' + Math.round(rgba.a * 100) / 100 + ')';\n            }\n        } else {\n            switch (outputFormat) {\n                case 'hsla':\n                    let hsla = this.hsva2hsla(hsva);\n                    let hslaText = new Hsla(Math.round((hsla.h) * 360), Math.round(hsla.s * 100), Math.round(hsla.l * 100), Math.round(hsla.a * 100) / 100);\n                    return 'hsl(' + hslaText.h + ',' + hslaText.s + '%,' + hslaText.l + '%)';\n                case 'rgba':\n                    let rgba = this.denormalizeRGBA(this.hsvaToRgba(hsva));\n                    return 'rgb(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ')';\n                default:\n                    return this.hexText(this.denormalizeRGBA(this.hsvaToRgba(hsva)));\n            }\n        }\n    }\n\n    hexText(rgba: Rgba): string {\n        let hexText = '#' + ((1 << 24) | (rgba.r << 16) | (rgba.g << 8) | rgba.b).toString(16).substr(1);\n        if (hexText[1] === hexText[2] && hexText[3] === hexText[4] && hexText[5] === hexText[6]) {\n            hexText = '#' + hexText[1] + hexText[3] + hexText[5];\n        }\n        return hexText;\n    }\n\n    denormalizeRGBA(rgba: Rgba): Rgba {\n        return new Rgba(Math.round(rgba.r * 255), Math.round(rgba.g * 255), Math.round(rgba.b * 255), rgba.a);\n    }\n\n}"],"sourceRoot":"/source/"}